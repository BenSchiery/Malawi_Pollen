env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="gray", nlevels = 50)
hist(age)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="gray", nlevels = 50)
poln.std <- vegan::decostand(x = poln,
method = "chi.square") # approximates chisquare distance
to.be.fit.std <- scale(x = to.be.fit)
# make distance matrices
poln.dist <- dist(poln.std)
#poln.dist <- vegdist(poln, method = "canberra")
# don't need this. The "to be fit data" does not need to be a D matrix.
#to.be.fit.dist <- dist(to.be.fit.std, method = "canberra")
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="gray", nlevels = 50)
hist(age)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
#ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
#ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
#ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = lake, main = "Lake Level", add=TRUE, col="gray", nlevels = 50)
lake <- -1*lake.full[,"lake"]
poln <- poln.full[,c("Poaceae", "Podocarpus", "miombo", "olea")]
astr <- poln.full[,"asters"]
# a data.frame of data to be used in the vector fit
to.be.fit <- data.frame("age" = age,
"charcoal" = char,
"lake" = lake,
"asters" = astr)
# scale and center the datasets
poln.std <- vegan::decostand(x = poln,
method = "chi.square") # approximates chisquare distance
to.be.fit.std <- scale(x = to.be.fit)
# make distance matrices
poln.dist <- dist(poln.std)
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
#ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = lake, main = "Lake Level", add=TRUE, col="gray", nlevels = 50)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50)
length(age)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406)
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord, k=2, distance='euclidean', autotransform=F)
?metaMDS
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
stressplot(poln.ord)
poln.ord
?stressplot
stressplot(object=poln.ord, dis=poln.dist)
goodness(object=poln.ord, dis=poln.dist)
goodness(object=poln.ord)
goodness.metaMDS
library(vegan)
goodness.metaMDS
goodness.metaMDS
goodness.metaMDS()
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
poln.ord<-isoMDS(poln.dist, y = poln.ord, k = 2, maxit = 50, trace = TRUE,
tol = 1e-3, p = 2)
library(MASS)
poln.ord<-isoMDS(poln.dist, y = poln.ord, k = 2, maxit = 50, trace = TRUE,
tol = 1e-3, p = 2)
poln.ord<-isoMDS(poln.dist, y = poln.ord$points, k = 2, maxit = 50, trace = TRUE,
tol = 1e-3, p = 2)
Shepard(poln.dist, poln.ord, p = 2)
poln.ord<-isoMDS(poln.dist, y = cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F), k = 2, maxit = 50, trace = TRUE,
tol = 1e-3, p = 2)
poln.ord<-isoMDS(poln.dist, y = cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)$points, k = 2, maxit = 50, trace = TRUE,
tol = 1e-3, p = 2)
Shepard(poln.dist, poln.ord, p = 2)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406, )
# make the pollen ordination
poln.mds <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.mds$points, k=2, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406, )
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406)
text(poln.ord$points, text=age )
age
age
text(poln.ord$points, text=age, cex=.5)
?text
text(poln.ord$points, labels=age, cex=.5)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=age, cex=.5)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16)
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5)
# plot the results of the vector fits
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406)
?ordisurf
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406, knots=10)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406, knots=3)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
npoints = 406, knots=3)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
knots=3, choices = c(1,2))
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
knots=2, choices = c(1,2))
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
knots=3, choices = c(1,2))
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
knots=3, choices = c(1,2))
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50,
knots=3)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50)
e results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=15)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=30)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100)
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 3, eig = T, add = F, x.ret = F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
poln.dist <- vegdist(poln, method = "canberra")
#
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 3, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 3, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=3, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
# make distance matrices
poln.dist <- dist(poln.std)
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 3, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=3, distance='euclidean', autotransform=F)
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 3, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=3, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
#ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = lake, main = "Lake Level", add=TRUE, col="gray", nlevels = 50)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
#ordisurf(x
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
# make distance matrices
poln.dist <- dist(poln.std)
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 2, eig = T, add = F, x.ret = F)
#############################
#	NMDS
poln.ord<- metaMDS(poln.ord$points, k=2, distance='euclidean', autotransform=F)
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=100, choices = c(1:3))
#ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = lake, main = "Lake Level", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = astr, main = "Asteraceae")
# plot the results of the vector fits
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
#ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
#         , knots=300)
#ordisurf(x = poln.ord, y = char, main = "Charcoal", add=TRUE, col="gray", nlevels = 50)
ordisurf(x = poln.ord, y = lake, main = "Lake Level", add=TRUE, col="orange", nlevels = 50
, knots=300)
#ordisurf(x = poln.ord,
col<-rep("black", length(age))
col[which(age>=400)]<-"red"
plot(poln.ord$points, pch = 16, type="n")
plot(poln.fit, col = "red")
plot(add.fit, col = "blue")
text(poln.ord$points, labels=round(age), cex=.5, col=col)
# ordination surfaces
ordisurf(x = poln.ord, y = age, main = "Age (kyr)", add=TRUE, col="orange", nlevels = 50
, knots=300)
