#                 add = TRUE,
#                 col = "orange",
#                 nlevels = 50,
#                 knots = 300)
# vegan::ordisurf(x = poln.ord,
#                 y = char,
#                 main = "Charcoal",
#                 add = TRUE,
#                 col = "gray",
#                 nlevels = 50)
lake.surf<-vegan::ordisurf(x = poln.ord, y = lake,
main = "Lake Level",
plot = FALSE,
col = "orange",
nlevels = 50,
)
plot(lake.surf,add=T, col="orange", nlevels = 50, knots = 30)
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1) col = c("red","black", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1), col = c("red","black", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
plot(poln.fit, col = "dark green", add=T)
plot(poln.fit, col = "dark green", add=T, lwd=1.5)
plot(poln.fit, col = "dark green", add=T, lwd=1.75)
plot(poln.fit, col = "dark green", add=T, lwd=2)
plot(poln.ord$points, pch = 16, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="black")
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white")
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=2)
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=2, axes = NULL)
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5, axes = NULL)
??bg
?par
axis(1, at = 1:7, labels = letters[1:7])
box(lty = '1373', col = 'red')
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty=1)
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="1")
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l")
axis(1, at = 1:7, labels = letters[1:7])
axis(1, at = seq(-.5,1, by=.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l")
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(0,-1, by=.25))
axis(2, at = seq(.5,-1, by=.25))
?axes
?axis
seq(.5,-1, by=.25)
axis(2, at = seq(.5,-1, by=-.25))
axis(2, at = seq(.5,-1.25, by=-.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l", axis = NULL)
axis(1, at = seq(-.5,1, by=.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.5,-1, by=-.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1), col = c("red","black", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
axis(2, at = seq(.25,-1, by=-.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col=col, bg="white", cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", axes = NULL)
# plot the results of the vector fits
## color ages > 400 in red
col <- c("gray", "red")[1 + (age >= 85)]
main<-"PCoA of Pollen: pollen and independent vectors fitted onto ordination"
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1), col = c("gray","black", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1), col = c("gray","red", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1), col = c("gray","red", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"), bg="black")
legend(-.65,-.85, pch=c(16,16, NA),lty=c(NA,NA,1), col = c("gray","red", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
?legend
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), col = c("gray","red", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), col = c("black","black", "orange")
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), col = c("black","black", "orange"),
fill = c("gray","red", NA)
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), col = c("black","black", "orange"),
fill = c("gray","red", NA)
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA)
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA), cex=1.5
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
legend(-.65,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), lwd=c(NA, NA, 2), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA), cex=1.5
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
plot(poln.fit, col = "dark green", add=T, lwd=2)
plot(poln.fit, col = "dark green", add=T, lwd=3)
plot(add.fit, col = "blue", add=T)
#                 add = TRUE,
#                 col = "orange",
#                 nlevels = 50,
#                 knots = 300)
# vegan::ordisurf(x = poln.ord,
#                 y = char,
#                 main = "Charcoal",
#                 add = TRUE,
#                 col = "gray",
#                 nlevels = 50)
lake.surf<-vegan::ordisurf(x = poln.ord, y = lake,
main = "Lake Level",
plot = FALSE,
col = "orange",
nlevels = 50,
)
plot(lake.surf,add=T, col="orange", nlevels = 50, knots = 30)
legend(.5,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), lwd=c(NA, NA, 2), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA), cex=1.5
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
rm(list = ls())
graphics.off()
library(vegan)
library(MASS)
# load the pollen data
poln.full <- read.csv("./data/20200626_pollen.csv")
# load interpolated data generated by code from Malawi_interpolation.R
# choose which interpolation method to use:
## linearly interpolated data:
lake.full <- read.csv("./data/lake_linterp.csv")
char.full <- read.csv("./data/char_linterp.csv")
## Krig interpolated data:
lake.full <- read.csv("./data/lake_Krig.csv")
char.full <- read.csv("./data/char_Krig.csv")
# split the loaded data to mix and match as needed
age <- lake.full[,"age"] # everything should have the same ages
char <- char.full[,"charcoal"]
lake <- -1*lake.full[,"lake"]
poln <- poln.full[,c("Poaceae", "Podocarpus", "miombo", "olea")]
astr <- poln.full[,"asters"]
# a data.frame of data to be used in the vector fit
to.be.fit <- data.frame("age" = age,
"charcoal" = char,
"lake" = lake,
"asters" = astr)
# scale and center the datasets
poln.std <- vegan::decostand(x = poln,
method = "chi.square") # approximates chisquare distance
to.be.fit.std <- scale(x = to.be.fit)
# make distance matrices
poln.dist <- dist(poln.std)
# poln.dist <- vegan::vegdist(poln, method = "canberra")
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 4, eig = T, add = F, x.ret = F)
var.expl<-poln.ord$eig[1:3]/sum(poln.ord$eig[1:3])
##########################################
#	NMDS
# poln.ord <- vegan::metaMDS(comm = poln.ord$points,
#                            k = 2,
#                            distance = 'euclidean',
#                            autotransform = F)
# poln.ord <- MASS::isoMDS(d = poln.dist,
#                          y = cmdscale(d = poln.dist,
#                                       k = 2,
#                                       eig = T,
#                                       add = F,
#                                       x.ret = F)$points,
#                          k = 2,
#                          maxit = 50,
#                          trace = TRUE,
#                          tol = 1e-3,
#                          p = 2)
# MASS::Shepard(d = poln.dist, y = poln.ord, p = 2)
##########################################
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
##########################################
# plot the results of the vector fits
## color ages > 400 in red
col <- c("gray", "red")[1 + (age >= 85)]
main<-"PCoA of Pollen: pollen and independent vectors fitted onto ordination"
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(.5,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), lwd=c(NA, NA, 2), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA), cex=1.5
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
plot(poln.fit, col = "dark green", add=T, lwd=3)
plot(add.fit, col = "blue", add=T)
#text(poln.ord$points, labels = round(age), cex = 0.5, col = col)
## ordination surfaces
# vegan::ordisurf(x = poln.ord,
#                 y = age,
#                 main = "Age (kyr)",
#                 add = TRUE,
#                 col = "orange",
#                 nlevels = 50,
#                 knots = 300)
# vegan::ordisurf(x = poln.ord,
#                 y = char,
#                 main = "Charcoal",
#                 add = TRUE,
#                 col = "gray",
#                 nlevels = 50)
lake.surf<-vegan::ordisurf(x = poln.ord, y = lake,
main = "Lake Level",
plot = FALSE,
col = "orange",
nlevels = 50,
)
plot(lake.surf,add=T, col="orange", nlevels = 50, knots = 30)
# vegan::ordisurf(x = poln.ord,
#                 y = astr,
#                 main = "Asteraceae")
##########################################
# MANOVA
# our raw data are pollen, charcoal, and lake level
# EOC: we use the n-1 column of scores of the PCoA, because the nth eigenvalue is 0, and the scores are redundant
data.raw <- data.frame(poln.ord$points[,1:3], char, lake)
# scale the raw data
data.scl <- scale(data.raw)
# EOC: the data in data.raw should already be euclidean, so the rest of this is superfluous
# # calculate the euclidean distance matrix of our scaled data
# data.scl.dist <- dist(data.scl)
#
# # perform our PCoA on the distance matrix and keep the eigenvalues
# data.scl.dist.pcoa <- cmdscale(d = data.scl.dist, k = 3, eig = T)
# data.scl.dist.pcoa.eig <- data.scl.dist.pcoa$eig
#
# # find the euclidean distance matrix of the resulting points
# data.scl.dist.pcoa.dist <- vegan::vegdist(x = data.scl.dist.pcoa$points,
#                                           method = "euclidean")
# binary indicator of age
age.gt.85 <- 0 + (age > 85)
# perform the MANOVA
poln.manova <- vegan::adonis(formula = data.raw ~ age.gt.85,
method = "euclidean", permutations = 10000)
poln.manova
# vegan::ordisurf(x = poln.ord,
#                 y = astr,
#                 main = "Asteraceae")
plot(poln.fit, col = "dark green", add=T, lwd=3)
plot(add.fit, col = "blue", add=T)
rm(list = ls())
graphics.off()
library(vegan)
library(MASS)
# load the pollen data
poln.full <- read.csv("./data/20200626_pollen.csv")
# load interpolated data generated by code from Malawi_interpolation.R
# choose which interpolation method to use:
## linearly interpolated data:
lake.full <- read.csv("./data/lake_linterp.csv")
char.full <- read.csv("./data/char_linterp.csv")
## Krig interpolated data:
lake.full <- read.csv("./data/lake_Krig.csv")
char.full <- read.csv("./data/char_Krig.csv")
# split the loaded data to mix and match as needed
age <- lake.full[,"age"] # everything should have the same ages
char <- char.full[,"charcoal"]
lake <- -1*lake.full[,"lake"]
poln <- poln.full[,c("Poaceae", "Podocarpus", "miombo", "olea")]
astr <- poln.full[,"asters"]
# a data.frame of data to be used in the vector fit
to.be.fit <- data.frame("age" = age,
"charcoal" = char,
"lake" = lake,
"asters" = astr)
# scale and center the datasets
poln.std <- vegan::decostand(x = poln,
method = "chi.square") # approximates chisquare distance
to.be.fit.std <- scale(x = to.be.fit)
# make distance matrices
poln.dist <- dist(poln.std)
# poln.dist <- vegan::vegdist(poln, method = "canberra")
# make the pollen ordination
poln.ord <- cmdscale(d = poln.dist, k = 4, eig = T, add = F, x.ret = F)
var.expl<-poln.ord$eig[1:3]/sum(poln.ord$eig[1:3])
##########################################
#	NMDS
# poln.ord <- vegan::metaMDS(comm = poln.ord$points,
#                            k = 2,
#                            distance = 'euclidean',
#                            autotransform = F)
# poln.ord <- MASS::isoMDS(d = poln.dist,
#                          y = cmdscale(d = poln.dist,
#                                       k = 2,
#                                       eig = T,
#                                       add = F,
#                                       x.ret = F)$points,
#                          k = 2,
#                          maxit = 50,
#                          trace = TRUE,
#                          tol = 1e-3,
#                          p = 2)
# MASS::Shepard(d = poln.dist, y = poln.ord, p = 2)
##########################################
# do the vector fit(s) of the data to our ordination
poln.fit <- vegan::envfit(ord = poln.ord,
env = poln.std,
permutaions = 10000)
add.fit <- vegan::envfit(ord = poln.ord,
env = to.be.fit.std,
permutaions = 10000)
##########################################
# plot the results of the vector fits
## color ages > 400 in red
col <- c("gray", "red")[1 + (age >= 85)]
main<-"PCoA of Pollen: pollen and independent vectors fitted onto ordination"
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", axes = NULL)
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(.5,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), lwd=c(NA, NA, 2), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA), cex=1.5
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
## ordination surfaces
# vegan::ordisurf(x = poln.ord,
#                 y = age,
#                 main = "Age (kyr)",
#                 add = TRUE,
#                 col = "orange",
#                 nlevels = 50,
#                 knots = 300)
# vegan::ordisurf(x = poln.ord,
#                 y = char,
#                 main = "Charcoal",
#                 add = TRUE,
#                 col = "gray",
#                 nlevels = 50)
lake.surf<-vegan::ordisurf(x = poln.ord, y = lake,
main = "Lake Level",
plot = FALSE,
col = "orange",
nlevels = 50,
)
plot(lake.surf,add=T, col="orange", nlevels = 50, knots = 30)
# vegan::ordisurf(x = poln.ord,
#                 y = astr,
#                 main = "Asteraceae")
plot(poln.fit, col = "dark green", add=T, lwd=3)
plot(add.fit, col = "blue", add=T)
#text(poln.ord$points, labels = round(age), cex = 0.5, col = col)
##########################################
# MANOVA
# our raw data are pollen, charcoal, and lake level
# EOC: we use the n-1 column of scores of the PCoA, because the nth eigenvalue is 0, and the scores are redundant
data.raw <- data.frame(poln.ord$points[,1:3], char, lake)
# scale the raw data
data.scl <- scale(data.raw)
# EOC: the data in data.raw should already be euclidean, so the rest of this is superfluous
# # calculate the euclidean distance matrix of our scaled data
# data.scl.dist <- dist(data.scl)
#
# # perform our PCoA on the distance matrix and keep the eigenvalues
# data.scl.dist.pcoa <- cmdscale(d = data.scl.dist, k = 3, eig = T)
# data.scl.dist.pcoa.eig <- data.scl.dist.pcoa$eig
#
# # find the euclidean distance matrix of the resulting points
# data.scl.dist.pcoa.dist <- vegan::vegdist(x = data.scl.dist.pcoa$points,
#                                           method = "euclidean")
# binary indicator of age
age.gt.85 <- 0 + (age > 85)
# perform the MANOVA
poln.manova <- vegan::adonis(formula = data.raw ~ age.gt.85,
method = "euclidean", permutations = 10000)
poln.manova
?axis
axis(1, at = seq(-.5,1, by=.25),xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,bty="l", xaxt="n")
axis(1, at = seq(-.5,1, by=.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,xaxt="n")
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,xaxt="n", bty="o")
?par
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,xaxt="n", bty="n")
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,xaxt="n", bty="n")
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
plot(poln.ord$points, pch = 21, type = "p",
xlab = paste("PCoA I (",round(var.expl[1]*100,1),"%)" ),
ylab = paste("PCoA II (",round(var.expl[2]*100,1),"%)" ), main=main,
col="black", bg=col, cex=1.5,xaxt="n",yaxt="n", bty="n")
axis(1, at = seq(-.5,1, by=.25))
axis(2, at = seq(.25,-1, by=-.25))
legend(.5,-.85, pch=c(21,21, NA),lty=c(NA,NA,1), lwd=c(NA, NA, 2), col = c("black","black", "orange"),
pt.bg =  c("gray","red", NA), cex=1.5
, legend=c("Pre 85k", "Post 85k", "Lake Level"))
#                 add = TRUE,
#                 col = "orange",
#                 nlevels = 50,
#                 knots = 300)
# vegan::ordisurf(x = poln.ord,
#                 y = char,
#                 main = "Charcoal",
#                 add = TRUE,
#                 col = "gray",
#                 nlevels = 50)
lake.surf<-vegan::ordisurf(x = poln.ord, y = lake,
main = "Lake Level",
plot = FALSE,
col = "orange",
nlevels = 50,
)
plot(lake.surf,add=T, col="orange", nlevels = 50, knots = 30)
# vegan::ordisurf(x = poln.ord,
#                 y = astr,
#                 main = "Asteraceae")
plot(poln.fit, col = "dark green", add=T, lwd=3)
plot(add.fit, col = "blue", add=T)
# our raw data are pollen, charcoal, and lake level
# EOC: we use the n-1 column of scores of the PCoA, because the nth eigenvalue is 0, and the scores are redundant
data.raw <- data.frame(poln.ord$points[,1:3], char, lake)
# scale the raw data
data.scl <- scale(data.raw)
# binary indicator of age
age.gt.85 <- 0 + (age > 85)
# perform the MANOVA
poln.manova <- vegan::adonis(formula = data.raw ~ age.gt.85,
method = "euclidean", permutations = 10000)
poln.manova
lake.surf
summary( lake.surf)
poln.fit
add.fit
summary( lake.surf)
